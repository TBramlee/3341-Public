package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, LPAREN, RPAREN, TIMES, NEGATE, RETURN, SEMICOLON,
         LCURLY, RCURLY, NIL, ASSIGN, PRINT, COMMA, MUTABLE, DOT, INT, REF, Q;

/* conditional terminals */
terminal EQ, GE, GT, LE, LT, 
         NE, NOT, AND, OR, IF, ELSE, WHILE;
terminal Long    INTCONST;
terminal String  IDENT;

non terminal Program         program;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal StmtList        stmtList; 
non terminal Stmt            stmt;
non terminal Cond            cond;
non terminal FormalDeclList  formalDeclList, neFormalDeclList;
non terminal FuncDef         funcDef;
non terminal FuncDefList     funcDefList;
non terminal ExprList        exprList, neExprList;
non terminal VarDecl         varDecl;
non terminal Type            type;

precedence left AND, OR;
precedence left NOT;
precedence left DOT;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left NEGATE;


precedence left ELSE;

precedence left AND, OR;
precedence left NOT;

precedence left LE, GE, GT, LT, EQ, NE;


start with program;

program ::= funcDefList:fdList
         {: RESULT = new Program(fdList, loc(fdListleft, fdListright)); :}
         ;

funcDefList ::= funcDef:fDef funcDefList:fdList
                {: RESULT = new FuncDefList(fDef, fdList, loc(fDefleft, fDefright)); :}
            |   /*null*/
                {: RESULT = null; :}  
            ;

funcDef ::= varDecl:var LPAREN formalDeclList:fdList RPAREN LCURLY stmtList:sl RCURLY
            {: RESULT = new FuncDef(var, fdList, sl, loc(varleft, varright)); :}
         ;

varDecl ::= type:t IDENT:id
            {: RESULT = new VarDecl(t, id, loc(idleft, idright)); :}  
        |   MUTABLE type:t IDENT:id
            {: RESULT = new VarDecl(t, id, loc(idleft, idright)); :} 
         ;

type ::= INT:e
         {: RESULT = new Type(Type.INT, loc(eleft, eright)); :}  
      |  REF:e
         {: RESULT = new Type(Type.REF, loc(eleft, eright)); :}  
      |  Q:e
         {: RESULT = new Type(Type.Q, loc(eleft, eright)); :} 

      ;

formalDeclList ::= neFormalDeclList:formalList
                   {: RESULT = formalList; :}
               |   /*null*/
                   {: RESULT = null; :}  
               ;

neFormalDeclList ::= varDecl:var COMMA neFormalDeclList:formalList
                     {: RESULT = new FormalDeclList(var, formalList, loc(varleft, varright)); :}
                 |   varDecl:var
                     {: RESULT = new FormalDeclList(var, null, loc(varleft, varright)); :}
                 ;

stmtList ::= stmt:s stmtList:sl
             {: RESULT = new StmtList(s, sl, loc(sleft, sright)); :}
          |   /*string*/
             {: RESULT = null; :}  
          ;

stmt ::= varDecl:var ASSIGN expr:e SEMICOLON
         {: RESULT = new DeclStmt(var, e, loc(varleft, varright)); :}

      |  IDENT:id ASSIGN expr:e SEMICOLON
         {: RESULT = new UpdateStmt(id, e, loc(idleft, idright)); :}

      |  IF LPAREN cond:c RPAREN stmt:s
         {: RESULT = new IfStmt(c, s, null, loc(cleft, cright)); :}

      |  IF LPAREN cond:c RPAREN stmt:s1 ELSE stmt:s2
         {: RESULT = new IfStmt(c, s1, s2, loc(cleft, cright)); :}

      |  WHILE LPAREN cond:c RPAREN stmt:s1
         {: RESULT = new WhileStmt(c, s1, loc(cleft, cright)); :}

      |  IDENT:id LPAREN exprList:eList RPAREN SEMICOLON
         {: RESULT = new CallStmt(id, eList, loc(idleft, idright)); :}

      |  PRINT expr:e SEMICOLON
         {:RESULT = new PrintStmt(e, loc(eleft, eright)); :}

      |  RETURN expr:e SEMICOLON
         {:RESULT = new ReturnStmt(e, loc(eleft, eright)); :}

      |  LCURLY stmtList:sl RCURLY
         {:RESULT = sl; :}
      ;

exprList ::= neExprList: eList
             {: RESULT = eList; :}
          |  /*null*/
             {: RESULT = null; :}  
         ;

neExprList ::= expr:e COMMA neExprList:eList
               {: RESULT = new ExprList(e, eList, loc(eleft, eright)); :} 

            |  expr:e
               {: RESULT = new ExprList(e, null, loc(eleft, eright)); :} 
           ;

expr ::= NIL:n
         {: RESULT = new NilExpr(loc(nleft, nright)); :}

      |  INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}

      |  IDENT:id
         {: RESULT = new IdentExpr(id, loc(idleft, idright)); :}

      |  binaryExpr:e
         {: RESULT = e; :}

      |  MINUS expr:e
         {: RESULT = new UnaryMinusExpr(e, loc(eleft, eright)); :}
         %prec NEGATE

      |  LPAREN type:t RPAREN expr:e
         {: RESULT = new CastExpr(t, e, loc(eleft, eright)); :}
         %prec NEGATE

      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}

      |  IDENT:id LPAREN exprList:eList RPAREN
         {: RESULT = new CallExpr(id, eList, loc(idleft, idright)); :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}

            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}

            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}

            |  expr:e1 DOT expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.DOT, e2, loc(e1left, e1right)); :}
            ;

cond ::= expr:e1 LE expr:e2
         {: RESULT = new CompCond(e1, CompCond.LE, e2, loc(e1left, e1right)); :}

      |  expr:e1 GE expr:e2
         {: RESULT = new CompCond(e1, CompCond.GE, e2, loc(e1left, e1right)); :}

      |  expr:e1 EQ expr:e2
         {: RESULT = new CompCond(e1, CompCond.EQ, e2, loc(e1left, e1right)); :}

      |  expr:e1 NE expr:e2
         {: RESULT = new CompCond(e1, CompCond.NE, e2, loc(e1left, e1right)); :}

      |  expr:e1 LT expr:e2
         {: RESULT = new CompCond(e1, CompCond.LT, e2, loc(e1left, e1right)); :}

      |  expr:e1 GT expr:e2
         {: RESULT = new CompCond(e1, CompCond.GT, e2, loc(e1left, e1right)); :}

      |  cond:c1 AND cond:c2
         {: RESULT = new LogicalCond(c1, LogicalCond.AND, c2, loc(c1left, c1right)); :}
      
      |  cond:c1 OR cond:c2
         {: RESULT = new LogicalCond(c1, LogicalCond.OR, c2, loc(c1left, c1right)); :}

      |  NOT cond:c1
         {: RESULT = new LogicalCond(c1, LogicalCond.NOT, null, loc(c1left, c1right)); :}
     
      |  LPAREN cond:c RPAREN
         {: RESULT = c; :}
      ;
