package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, LPAREN, RPAREN, TIMES, NEGATE, RETURN, SEMICOLON,
         LCURLY, RCURLY, INT, IDENT, NIL, ASSIGN, PRINT, COMMA;

/* conditional terminals */
terminal EQUAL, GREATEREQUAL, GREATERTHAN, LESSEREQUAL, LESSERTHAN, 
         NOTEQUAL, NOT, AND, OR, IF, ELSE;
terminal Long    INTCONST;

non terminal Program         program;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal StmtList        stmtList; 
non terminal Stmt            stmt;
non terminal varDecl         varDecl;
non terminal formalDeclList  formalDeclList;
non terminal NeFormalDeclList    neFormalDeclList;
non terminal Cond            cond;

precedence left PLUS, MINUS;
precedence left TIMES;
precedence left NEGATE;


start with program;

program ::= INT IDENT LPAREN INT IDENT: arg RPAREN LCURLY stmtList:sl RCURLY
         {: RESULT = new Program(arg, loc(argleft, argright)); :}
         ;

varDecl ::= INT IDENT:i 
         {: RESULT = new Variable(i, loc(ileft, iright)); :}
         ;

formalDeclList ::= varDecl COMMA neFormalDeclList
                | 
                ;

stmtList ::= stmt:s stmtList
         {: RESULT = new Statement(s, loc(sleft, sright)); :}
      ;

stmt ::= varDecl ASSIGN expr SEMICOLON
      |  IF LPAREN cond:c RPAREN stmt:s
         {: RESULT = new CondIf(c, loc(cleft, cright)); :}


expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      |  MINUS expr:e
         {: RESULT = new UnaryMinusExpr(e, loc(eleft, eright)); :}
         %prec NEGATE
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            ;
